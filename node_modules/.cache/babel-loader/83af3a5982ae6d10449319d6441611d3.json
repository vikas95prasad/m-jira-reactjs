{"ast":null,"code":"import { authHeader } from '../_helpers';\n\nvar axios = require('axios');\n\nvar apiHost = 'http://' + (process.env.API_HOST || 'localhost') + ':5000';\nexport var userService = {\n  login: login,\n  logout: logout,\n  getAll: getAll\n};\n\nfunction login(username, password) {\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  };\n  return fetch(\"/users/authenticate\", requestOptions).then(handleResponse).then(function (user) {\n    // login successful if there's a jwt token in the response\n    if (user.token) {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  var requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(\"/users\", requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/vikas/Downloads/react-redux-jwt-authentication-example-w5tqfu/src/_services/user.service.js"],"names":["authHeader","axios","require","apiHost","process","env","API_HOST","userService","login","logout","getAll","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","token","localStorage","setItem","removeItem","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIC,OAAO,GAAG,aAAaC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,WAArC,IAAoD,OAAlE;AAEA,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,KAAK,EAALA,KADuB;AAEvBC,EAAAA,MAAM,EAANA,MAFuB;AAGvBC,EAAAA,MAAM,EAANA;AAHuB,CAApB;;AAMP,SAASF,KAAT,CAAeG,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,MAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,QAAQ,EAARA;AAAZ,KAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,wBAAwBN,cAAxB,CAAL,CACFO,IADE,CACGC,cADH,EAEFD,IAFE,CAEG,UAAAE,IAAI,EAAI;AACV;AACA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACZ;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B;AACH;;AAED,WAAOA,IAAP;AACH,GAVE,CAAP;AAWH;;AAED,SAASb,MAAT,GAAkB;AACd;AACAe,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAED,SAAShB,MAAT,GAAkB;AACd,MAAMG,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAEf,UAAU;AAFA,GAAvB;AAKA,SAAOmB,KAAK,WAAWN,cAAX,CAAL,CAAgCO,IAAhC,CAAqCC,cAArC,CAAP;AACH;;AAED,SAASA,cAAT,CAAwBM,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBR,IAAhB,CAAqB,UAAAQ,IAAI,EAAI;AAChC,QAAMC,IAAI,GAAGD,IAAI,IAAIX,IAAI,CAACa,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAvB,QAAAA,MAAM,GAFmB,CAGzB;AACH;;AAED,UAAMwB,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BP,QAAQ,CAACQ,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOJ,IAAP;AACH,GAdM,CAAP;AAeH","sourcesContent":["import { authHeader } from '../_helpers';\nvar axios = require('axios')\n\nlet apiHost = 'http://' + (process.env.API_HOST || 'localhost') + ':5000'\n\nexport const userService = {\n    login,\n    logout,\n    getAll\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    return fetch(`/users/authenticate`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // login successful if there's a jwt token in the response\n            if (user.token) {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('user', JSON.stringify(user));\n            }\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction getAll() {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                // location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}