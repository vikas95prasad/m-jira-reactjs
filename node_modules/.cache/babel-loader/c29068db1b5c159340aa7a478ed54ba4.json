{"ast":null,"code":"import { authHeader } from '../_helpers';\n\nvar axios = require('axios');\n\nvar apiHost = 'http://' + (process.env.API_HOST || 'localhost') + ':5000';\nexport var userService = {\n  login: login,\n  logout: logout,\n  getAll: getAll\n};\n\nfunction login(username, password) {\n  // const requestOptions = {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify({ username, password })\n  // };\n  var data = {\n    email: username,\n    password: password\n  };\n  return axios.post(apiHost + '/api/users/login', data).then(function (response) {\n    debugger;\n    localStorage.setItem('user', JSON.stringify(response.data.user));\n  }).catch(function (error) {\n    return undefined;\n  }); // return fetch(`/users/authenticate`, requestOptions)\n  //     .then(handleResponse)\n  //     .then(user => {\n  //         // login successful if there's a jwt token in the response\n  //         if (user.token) {\n  //             // store user details and jwt token in local storage to keep user logged in between page refreshes\n  //         }\n  //         return user;\n  //     });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  var requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(\"/users\", requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/vikas/Downloads/react-redux-jwt-authentication-example-w5tqfu/src/_services/user.service.js"],"names":["authHeader","axios","require","apiHost","process","env","API_HOST","userService","login","logout","getAll","username","password","data","email","post","then","response","localStorage","setItem","JSON","stringify","user","catch","error","undefined","removeItem","requestOptions","method","headers","fetch","handleResponse","text","parse","ok","status","message","statusText","Promise","reject"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIC,OAAO,GAAG,aAAaC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,WAArC,IAAoD,OAAlE;AAEA,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,KAAK,EAALA,KADuB;AAEvBC,EAAAA,MAAM,EAANA,MAFuB;AAGvBC,EAAAA,MAAM,EAANA;AAHuB,CAApB;;AAMP,SAASF,KAAT,CAAeG,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B;AACA;AACA;AACA;AACA;AACA,MAAIC,IAAI,GAAG;AACTC,IAAAA,KAAK,EAAEH,QADE;AAETC,IAAAA,QAAQ,EAAEA;AAFD,GAAX;AAIA,SAAOX,KAAK,CAACc,IAAN,CAAWZ,OAAO,GAAG,kBAArB,EAAyCU,IAAzC,EACFG,IADE,CACG,UAAUC,QAAV,EAAoB;AACxB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACJ,IAAT,CAAcS,IAA7B,CAA7B;AACD,GAJE,EAKFC,KALE,CAKI,UAAUC,KAAV,EAAiB;AACtB,WAAOC,SAAP;AACD,GAPE,CAAP,CAV+B,CAmB/B;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACH;;AAED,SAAShB,MAAT,GAAkB;AACd;AACAS,EAAAA,YAAY,CAACQ,UAAb,CAAwB,MAAxB;AACH;;AAED,SAAShB,MAAT,GAAkB;AACd,MAAMiB,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE7B,UAAU;AAFA,GAAvB;AAKA,SAAO8B,KAAK,WAAWH,cAAX,CAAL,CAAgCX,IAAhC,CAAqCe,cAArC,CAAP;AACH;;AAED,SAASA,cAAT,CAAwBd,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACe,IAAT,GAAgBhB,IAAhB,CAAqB,UAAAgB,IAAI,EAAI;AAChC,QAAMnB,IAAI,GAAGmB,IAAI,IAAIZ,IAAI,CAACa,KAAL,CAAWD,IAAX,CAArB;;AACA,QAAI,CAACf,QAAQ,CAACiB,EAAd,EAAkB;AACd,UAAIjB,QAAQ,CAACkB,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACA1B,QAAAA,MAAM,GAFmB,CAGzB;AACH;;AAED,UAAMe,KAAK,GAAIX,IAAI,IAAIA,IAAI,CAACuB,OAAd,IAA0BnB,QAAQ,CAACoB,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAef,KAAf,CAAP;AACH;;AAED,WAAOX,IAAP;AACH,GAdM,CAAP;AAeH","sourcesContent":["import { authHeader } from '../_helpers';\nvar axios = require('axios')\n\nlet apiHost = 'http://' + (process.env.API_HOST || 'localhost') + ':5000'\n\nexport const userService = {\n    login,\n    logout,\n    getAll\n};\n\nfunction login(username, password) {\n    // const requestOptions = {\n    //     method: 'POST',\n    //     headers: { 'Content-Type': 'application/json' },\n    //     body: JSON.stringify({ username, password })\n    // };\n    let data = {\n      email: username,\n      password: password\n    }\n    return axios.post(apiHost + '/api/users/login', data)\n        .then(function (response) {\n          debugger\n          localStorage.setItem('user', JSON.stringify(response.data.user));\n        })\n        .catch(function (error) {\n          return undefined\n        })\n\n    // return fetch(`/users/authenticate`, requestOptions)\n    //     .then(handleResponse)\n    //     .then(user => {\n    //         // login successful if there's a jwt token in the response\n    //         if (user.token) {\n    //             // store user details and jwt token in local storage to keep user logged in between page refreshes\n                \n    //         }\n\n    //         return user;\n    //     });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction getAll() {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                // location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}